#!/bin/bash
#Created: 2024-01-04
#Sébastien Clément
#====================================================================
#Script to reformat Tucson format dendrochronology files (.rwl), to have them at 1 line per width.
#====================================================================
version=20240105
test=0 #1 = yes; 0 = no
#----------------------------------------------------------------
#Usage
#----------------------------------------------------------------
#script_format_rwl_for_db.txt infile.rwl
#	infile.rwl: the original .rwl file
# A folder named rwl_outfiles_202xxxxxxxxxxx will be created in the current folder and will contain all the temporary as well as the final file
# The final file is named: rwl_final_202xxxxxxxxxxx.txt

#----------------------------------------------------------------
#Quick notes on Tucson format dendrochronology files:
#----------------------------------------------------------------
#See: https://www.cybis.se/wiki/index.php?title=Tucson_format

#Each row contains:
#	a. the sample name. 
#		- All 8 first positions on the line are reserved to that name.
#		- When name is < 8 characters, it is right padded with spaces to reach 8.
#	b. the year of the first ring of that row
#		- Always on characters positions 9 to 12
#	c. a series of ring widths (10 or less).
#Ring widths are always expressed in integers, each width representing either 0.01 or 0.001 mm.
#For each sample, a series of widths always ends with an end of series (EOS) marker, either 999 (0.01 mm) or -9999 (0.001 mm).
#Missing value are written as -999 (0.01 mm) or 0 (-9999).

#Example 1: acadiE60A.rwl
#	100271861984  2233  2839  2518  2510  3006  2605
#	100271861990  2286  1507  2166  2122  1158   605   563   828   838   382
#	100271862000   457   482   394   244   256   193   106   204   180   138
#	100271862010   162    64   118 -9999
#	100540011986  2681  2861  2663  2842
#	(...)
#Notes: 
#	- this file is in 0.001 mm widths (-9999 EOS marker)
#	- in this file, the sample name and year are concatenated because sample names are exactly 8 characters in length.

#Output from the script for example 1 (in 0.001 format):
#	10027186	1984	2233
#	10027186	1985	2839
#	10027186	1986	2518
#	(...)	
#	10027186	2010	162
#	10027186	2011	64
#	10027186	2012	118
#	10054001	1986	2681
#	10054001	1987	2861
#	10054001	1988	2663
#	(...)


#Example 2: Petawawa_E353-H5.rwl
#	       1                                                     
#	       2                                                           1978 2022
#	       3 
#		#### CDendro=9.3.1  June 5 2018; 
#		#### licensedTo=Boilard, catherine.boilard@canada.ca; 
#	6822    1981   288   322   296   558   442   435   309   369   362
#	6822    1990   512   159   232   241   141   173   153    91   104   120
#	6822    2000   128   149   107   125   145   117   104   117   126   136
#	6822    2010    59    78    50    59    60    92    75    78    78    70
#	6822    2020    59    62    41   999
#	6822    #### Written=2023-01-24 11:25:40; 
#	6822    #### LicencedTo=martin girardin, martin.girardin@rncan.gc.ca; 
#	6823    1988   231   237
#	(...)
#Notes: 
#	- this file is in 0.01 mm widths (999 EOS marker)
#	- there are a lot of comments and a header, which need to be removed.

#Output from the script for example 2 (in 0.001 format):
#	6822	1981	2880
#	6822	1982	3220
#	6822	1983	2960
#	(...)
#	6822	2020	590
#	6822	2021	620
#	6822	2022	410
#	6823	1988	2310
#	6823	1989	2370
#	6823	1990	3060
#	6823	1991	2370
#	(...)


#----------------------------------------------------------------
#The script does the following:
#----------------------------------------------------------------
#	1. Cleans the file to remove the header, comments, and trailing spaces. Also replace spaces with tabs
#	2. Separates the sample name and the year
#	3. Splits each line into 1 row per year and width
#	4. Checks if the file is in 0.01 mm (999 end of series marker) or 0.001 mm (-9999 en of series marker) widths format.
#	5. Various checks:
#		a. are there series without end of series markers?
#		b. are there files with both (999 and -9999) end of series markers?
#		c. are there files with missing values markers of the wrong type ?
#	6. Replace all missing values with 0
#	7. Remove EOS markers
#	8. Convert 0.01 mm files to 0.001 mm.


#----------------------------------------------------------------
#Modifications
#----------------------------------------------------------------
#20240105
#	Now calculates for each sample: first/last year, years/rings count
#	Corrected logging


#----------------------------------------------------------------
#Variables definition
#----------------------------------------------------------------
IFS='
'
declare -i counter=1
declare -i widths_count

#Timestamp to add as a prefix for all temporary files in /dev/shm/, to avoid conflicts during concurrent script runs.
ts=$(date +%Y%m%d%H%M%S)


#Create an outfiles folder in current dir
#-----------------------------------------------------------------
mkdir ./rwl_outfiles_${ts}

#Copy infile to that folder
#-----------------------------------------------------------------
cp $1  ./rwl_outfiles_${ts}


#Start of logging block
{

#----------------------------------------------------------------
#Main program
#----------------------------------------------------------------
echo "========================================================="
echo "Script to reformat .rwl files for import into a database."
echo "Written by Sebastien Clément"
echo "Version: $version"
echo "========================================================="
echo "File analyzed: $1"
echo "Run on: $(date +%Y-%m-%d\ %T)"
echo "========================================================="


#Clean the file
#-----------------------------------------------------------------
#Remove lines with # or starting with multiple spaces followed by a digit
#Replace remainng spaces with tabulations
#Remove trailing tabs
printf "Cleaning the file..."
dos2unix $1
grep -vE '#|^ +[0-9]' $1 > /dev/shm/rwl_wo_header_${ts}.txt
#	100271861984	2233	2839	2518	2510	3006	2605
#	100271861990	2286	1507	2166	2122	1158	605	563	828	838	382
#	100271862000	457	482	394	244	256	193	106	204	180	138
#	100271862010	162	64	118	-9999
#	100540011986	2681	2861	2663	2842
#	(...)
printf "done.\n"


#Separate the sample name, year and widths
#-----------------------------------------------------------
#Split the first 8 chars (sample name) the next 4 chars (year) and the rest (widths) in 3 columns separated by tabs 
perl -pe 's/^(.{8})(\d{4})(.+)/\1\t\2\t\3/g' /dev/shm/rwl_wo_header_${ts}.txt > /dev/shm/rwl_split_sn_year_widths_${ts}.txt

#Remove spaces from sample name and year
cut -f1 -d $'\t' /dev/shm/rwl_split_sn_year_widths_${ts}.txt|perl -pe 's/ +//g' > /dev/shm/rwl_sn_${ts}.txt
cut -f2 -d $'\t' /dev/shm/rwl_split_sn_year_widths_${ts}.txt|perl -pe 's/ +//g' > /dev/shm/rwl_year_${ts}.txt

#Remove leading spaces from widths, and replace the remaining spaces with tabs
cut -f3 -d $'\t' /dev/shm/rwl_split_sn_year_widths_${ts}.txt|perl -pe 's/^ +//g'|perl -pe 's/ +/\t/g' > /dev/shm/rwl_widths_${ts}.txt

#Paste together the sample name, year and widths, all separated by tabs
paste /dev/shm/rwl_sn_${ts}.txt /dev/shm/rwl_year_${ts}.txt /dev/shm/rwl_widths_${ts}.txt > /dev/shm/rwl_separated_sample_and_year_${ts}.txt



#If in test mode, do only the first 3 samples
if [ $test -eq 1 ]
then 
	cut -f1 -d $'\t' /dev/shm/rwl_separated_sample_and_year_${ts}.txt|sort -u|head -3|perl -pe 's/^/^/g'|grep -f - /dev/shm/rwl_separated_sample_and_year_${ts}.txt > /dev/shm/rwl_temp_${ts}.txt
	mv /dev/shm/rwl_temp_${ts}.txt /dev/shm/rwl_separated_sample_and_year_${ts}.txt
fi

#Create 1 line per year
#-----------------------------------------------------------

echo "Creating one line per year/width:"
echo
infile_lines=$(cat /dev/shm/rwl_separated_sample_and_year_${ts}.txt|wc -l)
printf "" > /dev/shm/rwl_one_line_per_width_${ts}.txt
for line in $(cat /dev/shm/rwl_separated_sample_and_year_${ts}.txt)
do
	sample_name=$(echo $line|cut -f1 -d $'\t')
	starting_year=$(echo $line|cut -f2 -d $'\t')
	printf "Line ${counter} of ${infile_lines}: $sample_name, $starting_year          \r"
	echo $line|cut -f1,2 -d $'\t' --complement|perl -pe 's/\t/\n/g' > /dev/shm/rwl_temp_widths_${ts}.txt
	widths_count=$(cat /dev/shm/rwl_temp_widths_${ts}.txt|wc -l)
	let ending_year=${starting_year}+${widths_count}-1
	
	paste <(for i in $(seq ${widths_count}); do echo ${sample_name};done) <(seq ${starting_year} ${ending_year}) /dev/shm/rwl_temp_widths_${ts}.txt >> /dev/shm/rwl_one_line_per_width_${ts}.txt

	counter=${counter}+1
	
done
echo

#Count the number of distinct samples
#----------------------------------------------
samples_count=$(cut -f1 -d $'\t' /dev/shm/rwl_one_line_per_width_${ts}.txt|sort -u|wc -l)


#Count the different markers
#---------------------------------
echo "Checking the file format:"

#1. 999: end of series/widths expressed in 0.01 mm
h_of_mm_eos=$(awk -F "\t" '{if ($3 == "999") print}' /dev/shm/rwl_one_line_per_width_${ts}.txt|wc -l)
pct_h_of_mm_eos=$(echo "scale=0; $h_of_mm_eos/$samples_count*100" | bc)

#2. -9999: end of series/widths expressed in 0.001 mm
t_of_mm_eos=$(awk -F "\t" '{if ($3 == "-9999") print}' /dev/shm/rwl_one_line_per_width_${ts}.txt|wc -l)
pct_t_of_mm_eos=$(echo "scale=0; $t_of_mm_eos/$samples_count*100" | bc)

#3. -999: missing value in 0.01 mm files
h_of_mm_mv=$(awk -F "\t" '{if ($3 == "-999") print}' /dev/shm/rwl_one_line_per_width_${ts}.txt|wc -l)

#4. 0: missing value in 0.001 mm files
t_of_mm_mv=$(awk -F "\t" '{if ($3 == "0") print}' /dev/shm/rwl_one_line_per_width_${ts}.txt|wc -l)


echo samples_count $samples_count
echo h_of_mm_eos $h_of_mm_eos
echo pct_h_of_mm_eos $pct_h_of_mm_eos
echo t_of_mm_eos $t_of_mm_eos
echo pct_t_of_mm_eos $pct_t_of_mm_eos
echo h_of_mm_mv $h_of_mm_mv
echo t_of_mm_mv $t_of_mm_mv


#No 999 or -9999 end of series (EOS) markers found!
#-------------------------------------------
if [ ${h_of_mm_eos} -eq 0 ] && [ ${t_of_mm_eos} -eq 0 ]
then
	echo "No end of series markers, either 999 (hundredths of mm) or -9999 (thousandths of mm) could be found!"
	echo "Aborted!"
	exit
fi


#Determine the units used depending on the type of end of series marker
#---------------------------------------------------------------------------------------------------
#999 EOS marker ---> 0.01 mm file
#-----------------------------------------
if [ ${pct_h_of_mm_eos} -gt 90 ]
then
	echo "999 end of series marker found ---> 0.01 mm file"
	
	eos_marker="999"
	mv_marker="-999"
	
	#If there are missing EOS markers
	if [ ${pct_h_of_mm_eos} -lt 100 ]
	then
		echo "ERROR: some samples do not have the 999 end of series marker."
		echo "ABORTING!"
		#Todo: list the samples
		exit
	fi

	#If there are -9999 EOS markers (typical of a 0.001 mm file)
	if [ ${t_of_mm_eos} -gt 0 ]
	then
		echo "ERROR: some also have the -9999 end of series marker."
		echo "ABORTING!"
		#Todo: list the samples
		exit
	fi

	#If there are 0 (missing values, but for 0.001 mm files)
	if [ ${t_of_mm_mv} -gt 0 ]
	then
		echo "ERROR: there are 0 representing missing values, which are specific to the 0.001 mm file formats."
		echo "ABORTING!"
		#Todo: list the samples
		exit
	fi
fi


#-9999 EOS marker ---> 0.001 mm file
#-----------------------------------------
if [ ${pct_t_of_mm_eos} -gt 90 ]
then
	echo "-9999 end of series marker found ---> 0.001 mm file"
	
	eos_marker="-9999"
	mv_marker="0"
	
	#If there are missing EOS markers
	if [ ${pct_t_of_mm_eos} -lt 100 ]
	then
		echo "ERROR: some samples do not have the -9999 end of series marker."
		echo "ABORTING!"
		#Todo: list the samples
		exit
	fi

	#999 width values are possible in the 0.001 mm files.
	#However, if there are too many of those (here, we chose >20%), it could mean that the 999 EOS marker was present
	if [ ${pct_h_of_mm_eos} -gt 20 ]
	then
		echo "ERROR: more than 20% of samples have the 999 value, which is suspicious."
		echo "999 widths are possible in 0.001 mm formats, but not that many."
		echo "ABORTING!"
		#Todo: list the samples
		exit
	fi

	#If there are -999 (missing values, but for 0.01 mm files)
	if [ ${h_of_mm_mv} -gt 0 ]
	then
		echo "ERROR: there are -999 representing missing values, which are specific to the 0.01 mm file formats."
		echo "ABORTING!"
		#Todo: list the samples
		exit
	fi

fi

echo "done!"


#Replace missing values (-999) with 0 
#No need to specify for 0.01 mm files, as -999 are not present in 0.001 files
#--------------------------------------
echo "Replacing missing value markers (-999) with 0's"
awk -F "\t" '{if ($3 == "-999") print $1"\t"$2"\t0"; else print $0 }' /dev/shm/rwl_one_line_per_width_${ts}.txt > /dev/shm/rwl_one_line_per_width_0s_${ts}.txt

#Remove the EOS markers
#--------------------------------------
echo "Removing EOS markers (999 or -9999)"
awk -F "\t" -v eosm=${eos_marker} '{if ($3 != eosm) print }' /dev/shm/rwl_one_line_per_width_0s_${ts}.txt > /dev/shm/rwl_one_line_per_width_0s_no_eos_${ts}.txt

#If in 0.01 mm format, convert to 0.001 mm format
#--------------------------------------

if [[ ${eos_marker} == "999" ]]
then
	echo "Converting 0.01 to 0.001 format"
	awk -F "\t" '{print $1"\t"$2"\t"$3*10}' /dev/shm/rwl_one_line_per_width_0s_no_eos_${ts}.txt > /dev/shm/rwl_final_${ts}.txt
else
	cp /dev/shm/rwl_one_line_per_width_0s_no_eos_${ts}.txt /dev/shm/rwl_final_${ts}.txt
fi



#[NEW 20240105]: Calculates first/last ring year, rings/years count
#--------------------------------------
join -t $'\t' -1 1 -2 1  <( cut -f1,2 -d $'\t' /dev/shm/rwl_final_${ts}.txt |sort -k1,1 -k2,2n |sort -k1,1 -u) <(cut -f1,2 -d $'\t' /dev/shm/rwl_final_${ts}.txt |sort -k1,1 -k2,2nr |sort -k1,1 -u)| join -t $'\t' -1 1 -2 1 - <(cut -f1 -d $'\t' /dev/shm/rwl_final_${ts}.txt |sort|uniq -c|perl -pe 's/^ +(\d+) (\S+)/\2\t\1/g')|awk -F "\t" '{print $0"\t"$3-$2+1}'|awk -F "\t" '{if ($4 != $5) print $0"\tERR"; else print $0"\t"}' > /dev/shm/rwl_sn_fyear_lyear_rcount_ycount_err_${ts}.txt




#Move temporary files from RAM to current folder
printf "Moving temporary files..."
if [ $test -eq 0 ]
then
	mv /dev/shm/*_${ts}.txt ./rwl_outfiles_${ts}/
else
	echo $ts
fi
printf "done.\n"

echo
echo "Script completed!"

echo "The final file is rwl_outfiles_${ts}/rwl_final_${ts}.txt:"
head rwl_outfiles_${ts}/rwl_final_${ts}.txt|perl -pe 's/^/\t/g'
printf "\t(...$(cat rwl_outfiles_${ts}/rwl_final_${ts}.txt|wc -l))\n"
echo

echo "The file rwl_outfiles_${ts}/rwl_sn_fyear_lyear_rcount_ycount_err_${ts}.txt gives the first/last ring years:"
head rwl_outfiles_${ts}/rwl_sn_fyear_lyear_rcount_ycount_err_${ts}.txt|perl -pe 's/^/\t/g'
printf "\t(...$(cat rwl_outfiles_${ts}/rwl_sn_fyear_lyear_rcount_ycount_err_${ts}.txt|wc -l))\n"
echo
printf "\tColumn 1: sample name.\n"
printf "\tColumn 2: first ring year.\n"
printf "\tColumn 3: last ring year.\n"
printf "\tColumn 4: rings count.\n"
printf "\tColumn 5: counted years between columns 2 and 3, for validation.\n"
printf "\tColumn 6: If there is a difference between columns 4 and 5, ERR will appear here.\n"

#End of logging block
} 2>&1|tee rwl_outfiles_${ts}/script_log.txt



exit






